// Code generated by bpf2go; DO NOT EDIT.

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadProgram returns the embedded CollectionSpec for program.
func loadProgram() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProgramBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load program: %w", err)
	}

	return spec, err
}

// loadProgramObjects loads program and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*programObjects
//	*programPrograms
//	*programMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProgramObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProgram()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// programSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type programSpecs struct {
	programProgramSpecs
	programMapSpecs
	programVariableSpecs
}

// programProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type programProgramSpecs struct {
	HandleExecveTp *ebpf.ProgramSpec `ebpf:"handle_execve_tp"`
}

// programMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type programMapSpecs struct {
}

// programVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type programVariableSpecs struct {
}

// programObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProgramObjects or ebpf.CollectionSpec.LoadAndAssign.
type programObjects struct {
	programPrograms
	programMaps
	programVariables
}

func (o *programObjects) Close() error {
	return _ProgramClose(
		&o.programPrograms,
		&o.programMaps,
	)
}

// programMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProgramObjects or ebpf.CollectionSpec.LoadAndAssign.
type programMaps struct {
}

func (m *programMaps) Close() error {
	return _ProgramClose()
}

// programVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadProgramObjects or ebpf.CollectionSpec.LoadAndAssign.
type programVariables struct {
}

// programPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProgramObjects or ebpf.CollectionSpec.LoadAndAssign.
type programPrograms struct {
	HandleExecveTp *ebpf.Program `ebpf:"handle_execve_tp"`
}

func (p *programPrograms) Close() error {
	return _ProgramClose(
		p.HandleExecveTp,
	)
}

func _ProgramClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed program_bpf.o
var _ProgramBytes []byte
